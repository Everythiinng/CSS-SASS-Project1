.card {
  //Functionality
  perspective: 150rem; // we need perspective for a card to rotate like its moving towards you not like a curtain
  -moz-perspective: 150rem; //this will work on firefox aswell
  position: relative;
  height: 52rem;

  &__side {
    height: 52rem;
    transition: all 0.8s ease;
    position: absolute; // we need the position absolute cuz we stacking them
    top: 0;
    left: 0;
    width: 100%;
    backface-visibility: hidden;
    border-radius: $border-radius;
    box-shadow: 0 1.5rem 4rem rgba($color-black, 0.15);
    overflow: hidden; //this hides overflowing child elements, ex: the picture in the card

    &--front {
      background-color: $color-white; //this is the front part
    }

    &--back {
      transform: rotateY(180deg);
      // this is the back part which we need to declare it as rotated already

      &--1 {
        background-image: linear-gradient(
          to right bottom,
          $color-secondary-light,
          $color-secondary-dark
        ); //we give linear gradient to the back part
      }
      &--2 {
        background-image: linear-gradient(
          to right bottom,
          $color-primary-light,
          $color-primary-dark
        ); //we give linear gradient to the back part
      }
      &--3 {
        background-image: linear-gradient(
          to right bottom,
          $color-tertiary-light,
          $color-tertiary-dark
        ); //we give linear gradient to the back part
      }
    }
  }

  &:hover &__side--front {
    transform: rotateY(-180deg); // this will flip the front part to 180deg
    //we give this -180deg cuz it will move the otherside otherwise
  }

  &:hover &__side--back {
    transform: rotateY(0deg); // this will flip the back part back to 0deg
  }

  //FRONT SIDE STYLING
  &__picture {
    background-size: cover;
    height: 23rem;
    background-blend-mode: screen; // this gives a picture effect blending with the linear gradient
    -webkit-clip-path: polygon(0 0, 100% 0, 100% 80%, 0 100%); //for different browser
    clip-path: polygon(0 0, 100% 0, 100% 80%, 0 100%);

    &--1 {
      background-image: linear-gradient(
          to right bottom,
          $color-secondary-light,
          $color-secondary-dark
        ),
        url(../../img/nat-5.jpg);
    }
    &--2 {
      background-image: linear-gradient(to right bottom, $color-primary-light, $color-primary-dark),
        url(../../img/nat-6.jpg);
    }
    &--3 {
      background-image: linear-gradient(
          to right bottom,
          $color-tertiary-light,
          $color-tertiary-dark
        ),
        url(../../img/nat-7.jpg);
    }
  }

  &__heading {
    font-size: 2.8rem;
    font-weight: 300;
    text-transform: uppercase;
    color: $color-white;
    position: absolute;
    top: 12rem;
    right: 2rem;
    text-align: right;
    width: 75%;
  }

  &__heading-span {
    padding: 1rem 2rem;
    box-decoration-break: clone; // without this the text will be treated like a one line, with this it breaks into two for the paddings
    //what the clone does is apply the values to the boxes that were created from the element
    -webkit-box-decoration-break: clone;

    &--1 {
      background-image: linear-gradient(
        to right bottom,
        rgba($color-secondary-light, 0.85),
        rgba($color-secondary-dark, 0.85)
      );
    }

    &--2 {
      background-image: linear-gradient(
        to right bottom,
        rgba($color-primary-light, 0.85),
        rgba($color-primary-dark, 0.85)
      );
    }

    &--3 {
      background-image: linear-gradient(
        to right bottom,
        rgba($color-tertiary-light, 0.85),
        rgba($color-tertiary-dark, 0.85)
      );
    }
  }

  &__details {
    padding: 3rem;

    ul {
      list-style: none;
      width: 80%;
      margin: 0 auto; // this makes a block element in the block element centered

      li {
        text-align: center;
        font-size: 1.5rem;
        padding: 1rem;

        &:not(:last-child) {
          border-bottom: 1px solid $color-gray-light-2;
        }
      }
    }
  }
  //BACK SIDE STYLING
  &__cta {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 90%;
    text-align: center;
  }

  &__price-box {
    color: $color-white;
    margin-bottom: 8rem;
  }

  &__price-only {
    font-size: 1.4rem;
    text-transform: uppercase;
  }

  &__price-value {
    font-size: 6rem;
    font-weight: 100;
  }

  // With this we detect if a device has a touch screen device or not, but to do so we cannot use the respond() function
  // we need to insert the media queries here one by one so it can function
  // @include respond(tab-port)
  // So with this down below (hover: none) we say to the website if the hover function is not available we use the cards with price
  // we can say (hover: hover) which means if the device HAS hover capabilities ex. PC Laptop etc.
  @media only screen and(max-width: 56.25em), only screen and (hover: none) {
    //Functionality

    height: auto;
    border-radius: $border-radius;
    background-color: $color-white;
    box-shadow: 0 1.5rem 4rem rgba($color-black, 0.15);

    &__side {
      height: auto;
      box-shadow: none;
      position: relative; // we need the position absolute cuz we stacking them

      &--back {
        transform: rotateY(0);
        // this is the back part which we need to declare it as rotated already
        clip-path: polygon(0 15%, 100% 0, 100% 100%, 0 100%);
      }
    }

    &:hover &__side--front {
      transform: rotateY(0deg); // this will flip the front part to 180deg
      //we give this -180deg cuz it will move the otherside otherwise
    }

    &__details {
      padding: 1rem 3rem;
    }

    //FRONT SIDE STYLING
    &__cta {
      position: relative;
      top: 0;
      left: 0;
      transform: translate(0);
      width: 100%;
      padding: 7rem 4rem 4rem 4rem;
    }

    &__price-box {
      margin-bottom: 3rem;
    }

    &__price-only {
      font-size: 1.4rem;
      text-transform: uppercase;
    }

    &__price-value {
      font-size: 4rem;
    }
  }
}
